// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("program.bc", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 20);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 ArrayType* ArrayTy_2 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 19);
 
 PointerType* PointerTy_3 = PointerType::get(ArrayTy_2, 0);
 
 std::vector<Type*>FuncTy_4_args;
 PointerType* PointerTy_5 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 FuncTy_4_args.push_back(PointerTy_5);
 FunctionType* FuncTy_4 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_4_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_7_args;
 FuncTy_7_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_7 = FunctionType::get(
  /*Result=*/PointerTy_5,
  /*Params=*/FuncTy_7_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_6 = PointerType::get(FuncTy_7, 0);
 
 std::vector<Type*>FuncTy_9_args;
 FuncTy_9_args.push_back(PointerTy_5);
 FuncTy_9_args.push_back(PointerTy_5);
 FuncTy_9_args.push_back(PointerTy_5);
 FunctionType* FuncTy_9 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_9_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_8 = PointerType::get(FuncTy_9, 0);
 
 std::vector<Type*>FuncTy_11_args;
 FuncTy_11_args.push_back(PointerTy_5);
 FunctionType* FuncTy_11 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_11_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_10 = PointerType::get(FuncTy_11, 0);
 
 std::vector<Type*>FuncTy_13_args;
 FuncTy_13_args.push_back(PointerTy_5);
 FunctionType* FuncTy_13 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_13_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_12 = PointerType::get(FuncTy_13, 0);
 
 std::vector<Type*>FuncTy_14_args;
 FuncTy_14_args.push_back(IntegerType::get(mod->getContext(), 32));
 PointerType* PointerTy_15 = PointerType::get(PointerTy_5, 0);
 
 FuncTy_14_args.push_back(PointerTy_15);
 FunctionType* FuncTy_14 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_14_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_16 = PointerType::get(FuncTy_4, 0);
 
 
 // Function Declarations
 
 Function* func_CAT_execution = mod->getFunction("CAT_execution");
 if (!func_CAT_execution) {
 func_CAT_execution = Function::Create(
  /*Type=*/FuncTy_4,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"CAT_execution", mod); 
 func_CAT_execution->setCallingConv(CallingConv::C);
 }
 AttributeSet func_CAT_execution_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_CAT_execution_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_CAT_execution->setAttributes(func_CAT_execution_PAL);
 
 Function* func_CAT_create_signed_value = mod->getFunction("CAT_create_signed_value");
 if (!func_CAT_create_signed_value) {
 func_CAT_create_signed_value = Function::Create(
  /*Type=*/FuncTy_7,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"CAT_create_signed_value", mod); // (external, no body)
 func_CAT_create_signed_value->setCallingConv(CallingConv::C);
 }
 AttributeSet func_CAT_create_signed_value_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_CAT_create_signed_value_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_CAT_create_signed_value->setAttributes(func_CAT_create_signed_value_PAL);
 
 Function* func_CAT_binary_add = mod->getFunction("CAT_binary_add");
 if (!func_CAT_binary_add) {
 func_CAT_binary_add = Function::Create(
  /*Type=*/FuncTy_9,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"CAT_binary_add", mod); // (external, no body)
 func_CAT_binary_add->setCallingConv(CallingConv::C);
 }
 AttributeSet func_CAT_binary_add_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_CAT_binary_add_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_CAT_binary_add->setAttributes(func_CAT_binary_add_PAL);
 
 Function* func_printf = mod->getFunction("printf");
 if (!func_printf) {
 func_printf = Function::Create(
  /*Type=*/FuncTy_13,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"printf", mod); // (external, no body)
 func_printf->setCallingConv(CallingConv::C);
 }
 AttributeSet func_printf_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_printf->setAttributes(func_printf_PAL);
 
 Function* func_CAT_get_signed_value = mod->getFunction("CAT_get_signed_value");
 if (!func_CAT_get_signed_value) {
 func_CAT_get_signed_value = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"CAT_get_signed_value", mod); // (external, no body)
 func_CAT_get_signed_value->setCallingConv(CallingConv::C);
 }
 AttributeSet func_CAT_get_signed_value_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_CAT_get_signed_value_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_CAT_get_signed_value->setAttributes(func_CAT_get_signed_value_PAL);
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 GlobalVariable* gvar_array__str_1 = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_2,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str.1");
 gvar_array__str_1->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_17 = ConstantDataArray::getString(mod->getContext(), "H1: \x09Value 2 = %ld\x0A", true);
 Constant *const_array_18 = ConstantDataArray::getString(mod->getContext(), "H1: \x09Result = %ld\x0A", true);
 ConstantInt* const_int64_19 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("8"), 10));
 std::vector<Constant*> const_ptr_20_indices;
 ConstantInt* const_int32_21 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 const_ptr_20_indices.push_back(const_int32_21);
 const_ptr_20_indices.push_back(const_int32_21);
 Constant* const_ptr_20 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_20_indices);
 ConstantInt* const_int64_22 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
 std::vector<Constant*> const_ptr_23_indices;
 const_ptr_23_indices.push_back(const_int32_21);
 const_ptr_23_indices.push_back(const_int32_21);
 Constant* const_ptr_23 = ConstantExpr::getGetElementPtr(gvar_array__str_1, const_ptr_23_indices);
 ConstantInt* const_int64_24 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("5"), 10));
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_17);
 gvar_array__str_1->setInitializer(const_array_18);
 
 // Function Definitions
 
 // Function: CAT_execution (func_CAT_execution)
 {
  Function::arg_iterator args = func_CAT_execution->arg_begin();
  Value* ptr_d1 = args++;
  ptr_d1->setName("d1");
  
  BasicBlock* label_25 = BasicBlock::Create(mod->getContext(), "",func_CAT_execution,0);
  
  // Block  (label_25)
  CallInst* ptr_26 = CallInst::Create(func_CAT_create_signed_value, const_int64_19, "", label_25);
  ptr_26->setCallingConv(CallingConv::C);
  ptr_26->setTailCall(false);
  AttributeSet ptr_26_PAL;
  ptr_26->setAttributes(ptr_26_PAL);
  
  std::vector<Value*> void_27_params;
  void_27_params.push_back(ptr_d1);
  void_27_params.push_back(ptr_26);
  void_27_params.push_back(ptr_26);
  CallInst* void_27 = CallInst::Create(func_CAT_binary_add, void_27_params, "", label_25);
  void_27->setCallingConv(CallingConv::C);
  void_27->setTailCall(false);
  AttributeSet void_27_PAL;
  void_27->setAttributes(void_27_PAL);
  
  CallInst* int64_28 = CallInst::Create(func_CAT_get_signed_value, ptr_26, "", label_25);
  int64_28->setCallingConv(CallingConv::C);
  int64_28->setTailCall(false);
  AttributeSet int64_28_PAL;
  int64_28->setAttributes(int64_28_PAL);
  
  std::vector<Value*> int32_29_params;
  int32_29_params.push_back(const_ptr_20);
  int32_29_params.push_back(int64_28);
  CallInst* int32_29 = CallInst::Create(func_printf, int32_29_params, "", label_25);
  int32_29->setCallingConv(CallingConv::C);
  int32_29->setTailCall(false);
  AttributeSet int32_29_PAL;
  int32_29->setAttributes(int32_29_PAL);
  
  CallInst* ptr_30 = CallInst::Create(func_CAT_create_signed_value, const_int64_22, "", label_25);
  ptr_30->setCallingConv(CallingConv::C);
  ptr_30->setTailCall(false);
  AttributeSet ptr_30_PAL;
  ptr_30->setAttributes(ptr_30_PAL);
  
  std::vector<Value*> void_31_params;
  void_31_params.push_back(ptr_30);
  void_31_params.push_back(ptr_d1);
  void_31_params.push_back(ptr_26);
  CallInst* void_31 = CallInst::Create(func_CAT_binary_add, void_31_params, "", label_25);
  void_31->setCallingConv(CallingConv::C);
  void_31->setTailCall(false);
  AttributeSet void_31_PAL;
  void_31->setAttributes(void_31_PAL);
  
  CallInst* int64_32 = CallInst::Create(func_CAT_get_signed_value, ptr_30, "", label_25);
  int64_32->setCallingConv(CallingConv::C);
  int64_32->setTailCall(false);
  AttributeSet int64_32_PAL;
  int64_32->setAttributes(int64_32_PAL);
  
  std::vector<Value*> int32_33_params;
  int32_33_params.push_back(const_ptr_23);
  int32_33_params.push_back(int64_32);
  CallInst* int32_33 = CallInst::Create(func_printf, int32_33_params, "", label_25);
  int32_33->setCallingConv(CallingConv::C);
  int32_33->setTailCall(false);
  AttributeSet int32_33_PAL;
  int32_33->setAttributes(int32_33_PAL);
  
  ReturnInst::Create(mod->getContext(), label_25);
  
 }
 
 // Function: main (func_main)
 {
  Function::arg_iterator args = func_main->arg_begin();
  Value* int32_argc = args++;
  int32_argc->setName("argc");
  Value* ptr_argv = args++;
  ptr_argv->setName("argv");
  
  BasicBlock* label_35 = BasicBlock::Create(mod->getContext(), "",func_main,0);
  
  // Block  (label_35)
  CallInst* ptr_36 = CallInst::Create(func_CAT_create_signed_value, const_int64_24, "", label_35);
  ptr_36->setCallingConv(CallingConv::C);
  ptr_36->setTailCall(false);
  AttributeSet ptr_36_PAL;
  ptr_36->setAttributes(ptr_36_PAL);
  
  CallInst* void_37 = CallInst::Create(func_CAT_execution, ptr_36, "", label_35);
  void_37->setCallingConv(CallingConv::C);
  void_37->setTailCall(false);
  AttributeSet void_37_PAL;
  void_37->setAttributes(void_37_PAL);
  
  ReturnInst::Create(mod->getContext(), const_int32_21, label_35);
  
 }
 
 return mod;
}
